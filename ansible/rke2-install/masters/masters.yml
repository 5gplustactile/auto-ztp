---
# tasks file for ansible-rk2

- name: Set system's hostname
  ansible.builtin.hostname:
    name: "{{ hostvars[item]['ansible_host'] }}"
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"  

- name: stop firewall
  ansible.builtin.systemd:
    state: stopped
    name: ufw
  ignore_errors: true
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: update all packages to their latest version
  ansible.builtin.apt:
    update_cache: yes
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: install nfs-common package
  ansible.builtin.apt:
    name: nfs-common
    state: latest
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: install dependencies
  ansible.builtin.apt:
    name: python3-pip
    state: latest
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: Remove dependencies that are no longer required
  ansible.builtin.apt:
    autoremove: yes
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: download RKE2 install script
  get_url:
    url: https://get.rke2.io
    dest: /usr/local/bin/install-rke2.sh
    mode: 0755
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: Get RKE2 node token
  command: sudo cat /var/lib/rancher/rke2/server/token
  register: token
  run_once: true

- name: create rke2 directory
  ansible.builtin.file:
    path: /etc/rancher/rke2/
    state: directory
    recurse: true
    mode: '0755'
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: adding content config.yaml
  ansible.builtin.blockinfile:
    path: /etc/rancher/rke2/config.yaml
    create: true
    block: |
      disable:
        - rke2-ingress-nginx
      cloud-provider-name: external
      #node-taint:
      #  - CriticalAddonsOnly=true:NoExecute
      server: https://{{ nlb }}:9345
      token: {{ token.stdout }}
      tls-san:
        - {{ nlb }}
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: install rke2 master
  ansible.builtin.shell: |
     INSTALL_RKE2_CHANNEL=v1.27 \
     INSTALL_RKE2_TYPE="server" \
     /usr/local/bin/install-rke2.sh
  loop: "{{ groups['masters'][1:] }}"
  delegate_to: "{{ item }}"

- name: find kubectl file
  ansible.builtin.find:
    paths: /var/lib/rancher/rke2/data/
    patterns: kubectl
    file_type: file
    recurse: yes
  register: kubectl_path

- name: create a symbolic link for kubectl
  ansible.builtin.file:
    path: /usr/local/bin/kubectl
    src: "{{ kubectl_path.files[0].path }}"
    state: link
    force: yes

- name: enable and start rke2
  block:
    - name: Wait for a couple of minutes
      pause:
        minutes: 2

    - name: enable and start rke2
      ansible.builtin.systemd:
        name: rke2-server.service
        enabled: true
        state: started
      loop: "{{ groups['masters'][1:] }}"
      delegate_to: "{{ item }}"
  rescue:
    - ansible.builtin.systemd:
        name: rke2-server.service
        state: stopped
      loop: "{{ groups['masters'][1:] }}"
      delegate_to: "{{ item }}"
    - ansible.builtin.systemd:
        name: rke2-server.service
        state: restarted
      loop: "{{ groups['masters'][1:] }}"
      delegate_to: "{{ item }}"

- name: Get the instance ID from the metadata service
  command: curl -s http://169.254.169.254/latest/meta-data/instance-id
  register: instance_id
  changed_when: false

- name: Get the availability zone from the metadata service
  command: curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone
  register: availability_zone
  changed_when: false

- name: Get the node name
  command: hostname
  register: node_name
  changed_when: false

- name: Construct the provider ID
  set_fact:
    provider_id: "aws:///{{ availability_zone.stdout }}/{{ instance_id.stdout }}"

- name: Check if providerID is already set
  shell: kubectl get node "{{ node_name.stdout }}" -o jsonpath='{.spec.providerID}' --kubeconfig /etc/rancher/rke2/rke2.yaml
  register: existing_provider_id
  changed_when: false

- name: Update the node
  shell: kubectl patch node "{{ node_name.stdout }}" -p "{\"spec\":{\"providerID\":\"{{ provider_id }}\"}}" --kubeconfig /etc/rancher/rke2/rke2.yaml
  when: existing_provider_id.stdout == ""